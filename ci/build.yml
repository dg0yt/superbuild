# This file is part of OpenOrienteering.

# Copyright 2019-2021 Kai Pastor
#
# Redistribution and use is allowed according to the terms of the BSD license:
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 
# 1. Redistributions of source code must retain the copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. The name of the author may not be used to endorse or promote products 
#    derived from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
# NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

steps:
- checkout: self
  path: ports

- download: cache
  artifact: source
  continueOnError: true
  displayName: 'Download cached sources'

- download: cache
  artifact: $(Agent.OSArchitecture)-$(Agent.OS)
  continueOnError: true
  displayName: 'Download cached binaries'

- bash: |
    set -e
    set -x
    rm -Rf "$(VCPKG_DOWNLOADS)/source"
    mv "$(Pipeline.Workspace)/cache/$(Agent.OSArchitecture)-$(Agent.OS)" "$(VCPKG_DEFAULT_BINARY_CACHE)"
    git config --global advice.detachedHead false
    "$(Build.SourcesDirectory)/bootstrap/make-root.sh" "$(Build.SourcesDirectory)"
    SCRIPT_SHA256="$(cmake -E sha256sum bootstrap/make-vcpkg-tool.sh  | sed 's/^\(........\).*/\1/')"
    VCPKG_TOOL_CACHE="$(VCPKG_DEFAULT_BINARY_CACHE)/vcpkg-tool-${SCRIPT_SHA256}"
    VCPKG_TOOL=
    for I in vcpkg vcpkg.exe; do
        if [ -f "${VCPKG_TOOL_CACHE}/${I}" ]; then
            VCPKG_TOOL="${I}"
            cp "${VCPKG_TOOL_CACHE}/${VCPKG_TOOL}" "${VCPKG_TOOL}"
        fi
    done
    set +x
    echo "##vso[task.setVariable variable=VCPKG_TOOL]${VCPKG_TOOL}"
    echo "##vso[task.setVariable variable=VCPKG_TOOL_CACHE]${VCPKG_TOOL_CACHE}"
    echo "##vso[task.setVariable variable=VCPKG_ROOT]${PWD}"
  displayName: 'Bootstrap vcpkg'

- bash: |
    set -x
    BASH_ENV="${CI_BASH_ENV}" ${CI_BASH} -s << END_CI
    set -e
    set -x
    echo "PATH=\${PATH}"
    test -n "$(VCPKG_DEFAULT_BINARY_CACHE)"
    test -n "$(VCPKG_TOOL_CACHE)"
    case "$(uname -s)" in
      Darwin*)
        export CC=gcc-10
        export CXX=g++-10
        ;;
    esac
    git config --global user.name "Azure pipelines"  # needed for ubuntu & windows image
    git config --global user.email noreply@localhost # needed for windows image
    bootstrap/make-vcpkg-tool.sh
    rm -Rf "$(VCPKG_DEFAULT_BINARY_CACHE)/vcpkg-tool-"*
    mkdir -p "\${VCPKG_TOOL_CACHE}"
    for I in vcpkg vcpkg.exe; do
        if [ -f "\${I}" ]; then
            VCPKG_TOOL="\${I}"
            cp "\${VCPKG_TOOL}" "\${VCPKG_TOOL_CACHE}/\${VCPKG_TOOL}"
        fi
    done
    set +x
    echo "##vso[task.setVariable variable=VCPKG_TOOL]\${VCPKG_TOOL}"
    END_CI
  displayName: 'Build vcpkg tool'
  condition: eq('${{ variables.VCPKG_TOOL }}', '')

- bash: |
    set -x
    BASH_ENV="${CI_BASH_ENV}" ${CI_BASH} -s << END_CI
    set -e
    set -x
    echo "PATH=\${PATH}"
    if [ -n "\${MSYS2_INSTALL_DIR}" ]; then
        unset CC
        unset CXX
        unset PKG_CONFIG_PATH
        #source "\${MSYS2_INSTALL_DIR/\\/\/}/etc/profile"
        export PATH="\${MSYS2_INSTALL_DIR/\\/\/}:\${PATH}"
    fi
    env | grep VCPKG_ | sort
    test -f "\${VCPKG_TOOL}"
    while read PACKAGE; do
        "\${VCPKG_TOOL}" install "\${PACKAGE}" || {
          "\${VCPKG_TOOL}" --debug search "\${PACKAGE}"
          "\${VCPKG_TOOL}" --debug install "\${PACKAGE}"
        }
    done << END_PACKAGES
      base-files
      zlib
      xz-utils
    END_PACKAGES
    echo 'tools' > '$(VCPKG_DOWNLOADS)/.artifactignore'
    END_CI
  displayName: 'Build packages'

- publish: $(VCPKG_DOWNLOADS)
  artifact: source
  condition: eq( variables.Agent.OS, 'Darwin')
  displayName: 'Publish sources'

- publish: $(VCPKG_DEFAULT_BINARY_CACHE)
  artifact: $(Agent.OSArchitecture)-$(Agent.OS)
  displayName: 'Publish binaries'
